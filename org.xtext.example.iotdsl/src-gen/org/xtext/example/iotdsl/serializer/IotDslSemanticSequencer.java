/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.iotdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.iotdsl.iotDsl.Comando;
import org.xtext.example.iotdsl.iotDsl.Estado;
import org.xtext.example.iotdsl.iotDsl.Evento;
import org.xtext.example.iotdsl.iotDsl.IotDsl;
import org.xtext.example.iotdsl.iotDsl.IotDslPackage;
import org.xtext.example.iotdsl.iotDsl.Transacao;
import org.xtext.example.iotdsl.services.IotDslGrammarAccess;

@SuppressWarnings("all")
public class IotDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IotDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IotDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IotDslPackage.COMANDO:
				sequence_Comando(context, (Comando) semanticObject); 
				return; 
			case IotDslPackage.ESTADO:
				sequence_Estado(context, (Estado) semanticObject); 
				return; 
			case IotDslPackage.EVENTO:
				sequence_Evento(context, (Evento) semanticObject); 
				return; 
			case IotDslPackage.IOT_DSL:
				sequence_IotDsl(context, (IotDsl) semanticObject); 
				return; 
			case IotDslPackage.TRANSACAO:
				sequence_Transacao(context, (Transacao) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Comando returns Comando
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Comando(ISerializationContext context, Comando semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotDslPackage.Literals.COMANDO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotDslPackage.Literals.COMANDO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComandoAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Estado returns Estado
	 *
	 * Constraint:
	 *     (name=ID acoes+=[Comando|ID]* transacoes+=Transacao*)
	 */
	protected void sequence_Estado(ISerializationContext context, Estado semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Evento returns Evento
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Evento(ISerializationContext context, Evento semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotDslPackage.Literals.EVENTO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotDslPackage.Literals.EVENTO__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventoAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IotDsl returns IotDsl
	 *
	 * Constraint:
	 *     (eventos+=Evento* resetEventos+=[Evento|ID]* comandos+=Comando* estados+=Estado*)
	 */
	protected void sequence_IotDsl(ISerializationContext context, IotDsl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transacao returns Transacao
	 *
	 * Constraint:
	 *     (evento=[Evento|ID] estado=[Estado|ID])
	 */
	protected void sequence_Transacao(ISerializationContext context, Transacao semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, IotDslPackage.Literals.TRANSACAO__EVENTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotDslPackage.Literals.TRANSACAO__EVENTO));
			if (transientValues.isValueTransient(semanticObject, IotDslPackage.Literals.TRANSACAO__ESTADO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, IotDslPackage.Literals.TRANSACAO__ESTADO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransacaoAccess().getEventoEventoIDTerminalRuleCall_0_0_1(), semanticObject.eGet(IotDslPackage.Literals.TRANSACAO__EVENTO, false));
		feeder.accept(grammarAccess.getTransacaoAccess().getEstadoEstadoIDTerminalRuleCall_2_0_1(), semanticObject.eGet(IotDslPackage.Literals.TRANSACAO__ESTADO, false));
		feeder.finish();
	}
	
	
}
