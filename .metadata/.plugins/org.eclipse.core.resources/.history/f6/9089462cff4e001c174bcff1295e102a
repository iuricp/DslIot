/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.iotdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.iotdsl.iotDsl.Comando;
import org.xtext.example.iotdsl.iotDsl.Estado;
import org.xtext.example.iotdsl.iotDsl.IotDsl
import org.xtext.example.iotdsl.iotDsl.Evento
import java.time.format.DateTimeFormatter
import java.time.LocalDateTime
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IotDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as IotDsl
		fsa.generateFile(resource.className+".java", toJavaCode(model));
		
		val model = resource.contents.head as IotDsl
		fsa.generateFile(resource.className+"log.txt", logEventos(resource.contents.head as IotDsl));	 
		fsa.generateFile(resource.className+".txt", 'Log' + resource.allContents.filter(Estado).map[compile].join(' '))
	}

	protected def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.')).toFirstUpper
	}

	protected def logEventos(IotDsl idsl)'''
		«idsl.estados.head?.name» '/t'
		«idsl.eventos.head?.name»'/t'
		«idsl.comandos.head?.name»'/t'
	'''


//	protected def logEventos(IotDsl idsl) '''
//		«idsl.eResource.className»
//	
//	'''
	
	private def compile(Estado e) '''  
		«e.name»
	'''

	protected def toJavaCode(IotDsl idsl) '''
		import java.io.BufferedReader;
		import java.io.IOException;
		import java.io.InputStreamReader;
		
		public class «idsl.eResource.className» {
			
			public static void main(String[] args) {
				new «idsl.eResource.className»().run();
			}
			
			«FOR c : idsl.comandos»
				«c.declareCommand»
			«ENDFOR»
			
			protected void run() {
				boolean executeActions = true;
				String currentState = "«idsl.estados.head?.name»";
				String lastEvent = null;
				while (true) {
					«FOR state : idsl.estados»
						«state.generateCode»
					«ENDFOR»
					«FOR resetEvent : idsl.resetEventos»
						if ("«resetEvent.name»".equals(lastEvent)) {
							System.out.println("Resetting state machine.");
							currentState = "«idsl.estados.head?.name»";
							executeActions = true;
						}
					«ENDFOR»
					
				}
			}
			
			private String receiveEvent() {
				System.out.flush();
				BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				try {
					return br.readLine();
				} catch (IOException ioe) {
					System.out.println("Problem reading input");
					return "";
				}
			}
		}
	'''
	protected def declareCommand(Comando comando) '''
		protected void do«comando.name.toFirstUpper»() {
			System.out.println("Executnado comando «comando.name» («comando.code»)");
		}
	'''
	protected def generateCode(Estado estado) '''
		if (currentState.equals("«estado.name»")) {
			if (executeActions) {
				«FOR c : estado.acoes»
					do«c.name.toFirstUpper»();
				«ENDFOR»
				executeActions = false;
			}
			System.out.println("A biblioteca está '«estado.name»'. Você pode [«
				estado.transacoes.map(t | t.evento.name).join(', ')»].");
			lastEvent = receiveEvent();
			«FOR t : estado.transacoes»
				if ("«t.evento.name»".equals(lastEvent)) {
					currentState = "«t.estado.name»";
					executeActions = true;
				}
			«ENDFOR»
		}
	'''
}
